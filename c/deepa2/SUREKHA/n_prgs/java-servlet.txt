Session Tracking:

It provides servlets and other serverside applications, the ability to keep track of a single user sequential request.

Types of Session Tracking:
1) URL rewriting
2) Hidden Form Fields
3) Cookies
4) Secure socket layer sessions

1) URL rewriting:
In this the token is embed in each URL. In each dynamically generated page, the server embeds extra path information in each url page. When the client submits the request using such url the token is transmitted to the server.

2) Hidden Form Fields:
This is similar to URL rewriting instead of rewriting each url the server embeds hidden field in each form. When the client submits the form, the additional field also sent in the request. The server can use these parameters to establish and maintain a session.

3) Cookies: A cookie is a small piece of code generated by the server and stored in the client machine. It has an ability to maintain the state information. The information saved in the cookie is -
1)name 2) value  3)Expiration date and 4) Domain and path.

It can exchanged in request and response headers and therefore donot involve manipulating the generated response to contain a token.

4) Secure Socket Layer Sessions: SSL is used in HTTPS protocol. SSL allow SSL enabled server to authenticate SSL enabled clients and to maintain an encrypted connection between client and server. In this process both client and server generate session keys which are symmetric keys used for encrypting and decrypting messages. Servers based on HTTPS protocol can use client's symmetric key to establish a session.

Methods:
Redirect: This method sends a redirect response to the client. The client receives the http response code indicating that temporarily the client is redirect to the specified location. If the specified location is relative, this method converts into an absolute URL before redirecting.

Request Dispatcher() method: This method returns a Request Dispatcher object associated with the resource located at the current path. You can use RequestDispatcher to delegate request/response processing to other resources within the application.

Session Object: It is used to maintain a user session related information on the server side. You can store retrieve and remove the information from a session object according to your programming logic.
For ex: HttpSession hs = req.getSession(true);
	hs.putValue("username", password);
                    hs.removeValue(username);
The session id length should not be more than 4k

Business Logic: The processes are implemented in the business logic to manage the data. For ex.when someone borrows a book from a library, that is a process in the business logic. The process change the state of the data and then provide this information for a dialog.

Servlet chaining: Servlet chaining is a process of chaining the output of one servlet to another servlet.

How we know when user session has expired/removed?
Define a class SessionTimeOutIndicater which implements javax.servlet.http.HttpSessionBindingListener.Then create a object of class and add it in user session. When the session is removed SessionTimeoutIndicater.valueUnbound() will be called by the servle tengine.

Filters:
It is a way to provide a plug-in capability to your web applications. Using filters you can encapsulate different behaviors needed to help process a request. It also change the functionality of a web application with deployment descriptior.
Filters are used for-
1)Authentication filters
2)Logging and auditing filters
3)Data compression filters
4) Encryption filters.


